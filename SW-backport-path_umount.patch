From 71c2631ceaedc7438e0dbc245b4e7db1bcaa2825 Mon Sep 17 00:00:00 2001
From: Your Name <you@example.com>
Date: Mon, 21 Apr 2025 08:03:04 +0800
Subject: [PATCH 3/3] backport path_umount
 https://github.com/backslashxx/msm8953-kernel/commit/195f07593ae9769a992f3945bcdc43ff7fc99827

---
 fs/namespace.c | 46 ++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 46 insertions(+)

diff --git a/fs/namespace.c b/fs/namespace.c
index edfe4ef35..f6cf0e48c 100644
--- a/fs/namespace.c
+++ b/fs/namespace.c
@@ -1645,6 +1645,52 @@ static inline bool may_mandlock(void)
 }
 #endif
 
+/**
+ * path_mounted - check whether path is mounted
+ * @path: path to check
+ *
+ * Determine whether @path refers to the root of a mount.
+ *
+ * Return: true if @path is the root of a mount, false if not.
+ */
+static inline bool path_mounted(const struct path *path)
+{
+	return path->mnt->mnt_root == path->dentry;
+}
+
+static int can_umount(const struct path *path, int flags)
+{
+	struct mount *mnt = real_mount(path->mnt);
+
+	if (!may_mount())
+		return -EPERM;
+	if (!path_mounted(path))
+		return -EINVAL;
+	if (!check_mnt(mnt))
+		return -EINVAL;
+	if (mnt->mnt.mnt_flags & MNT_LOCKED) /* Check optimistically */
+		return -EINVAL;
+	if (flags & MNT_FORCE && !capable(CAP_SYS_ADMIN))
+		return -EPERM;
+	return 0;
+}
+
+// caller is responsible for flags being sane
+int path_umount(struct path *path, int flags)
+{
+	struct mount *mnt = real_mount(path->mnt);
+	int ret;
+
+	ret = can_umount(path, flags);
+	if (!ret)
+		ret = do_umount(mnt, flags);
+
+	/* we mustn't call path_put() as that would clear mnt_expiry_mark */
+	dput(path->dentry);
+	mntput_no_expire(mnt);
+	return ret;
+}
+
 /*
  * Now umount can handle mount points as well as block devices.
  * This is important for filesystems which use unnamed block devices.
-- 
2.49.0

